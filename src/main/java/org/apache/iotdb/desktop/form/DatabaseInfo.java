package org.apache.iotdb.desktop.form;

import org.apache.iotdb.desktop.component.*;
import org.apache.iotdb.desktop.config.Configuration;
import org.apache.iotdb.desktop.model.*;
import org.apache.iotdb.desktop.util.Utils;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

public class DatabaseInfo extends TabPanel {
    private JPanel rootPanel;
    private QueryResultTable deviceTable;
    private JScrollPane deviceScrollPanel;
    private QueryResultTableModel deviceTableModel;

    private final Database database;

    public DatabaseInfo(Database database) {
        super();
        $$$setupUI$$$();
        setLayout(new BorderLayout());
        add(rootPanel, BorderLayout.CENTER);
        this.database = database;
        initComponents();

        loadDevices();

        this.addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent e) {
                deviceTable.requestFocusInWindow();
            }
        });
    }

    private void initComponents() {

    }

    private void loadDevices() {
        deviceTableModel.clear();

        SwingWorker<QueryResult, Integer> worker = new SwingWorker<>() {
            @Override
            protected void done() {
                try {
                    deviceTableModel.setResult(get());
                    Utils.autoResizeTableColumns(deviceTable, 0);
                } catch (Exception ex) {
                    Utils.Message.error(ex.getMessage(), ex);
                }
            }

            @Override
            protected QueryResult doInBackground() throws Exception {
                QueryResult result = database.getSession().query("show devices " + database.getName() + ".**",
                    Configuration.instance().options().isLogInternalSql()
                );
                result.getColumns().add("MetricCount");
                result.getColumnTypes().add("INT32");
                result.getDatas().forEach(row -> {
                    try {
                        int count = database.getSession().countOne("count timeseries " + row.get("Device") + ".**");
                        row.put("MetricCount", count);
                    } catch (Exception e) {
                        row.put("MetricCount", 0);
                    }
                });
                return result.columnNamesLocalization();
            }
        };
        worker.execute();
    }

    @Override
    public Session getSession() {
        return database.getSession();
    }

    @Override
    public String getTabbedKey() {
        return database.getKey();
    }

    @Override
    public boolean refreshable() {
        return true;
    }

    @Override
    public void refresh() {
        loadDevices();
    }

    @Override
    public void dispose() {
        deviceTable.dispose();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        rootPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        deviceScrollPanel = new JScrollPane();
        rootPanel.add(deviceScrollPanel, BorderLayout.CENTER);
        deviceScrollPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        deviceTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        deviceScrollPanel.setViewportView(deviceTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    private void createUIComponents() {
        deviceTableModel = new QueryResultTableModel();
        deviceTable = new QueryResultTable(deviceTableModel);
        deviceTable.setEditable(false);
    }
}
